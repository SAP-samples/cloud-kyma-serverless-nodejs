'use strict';

const { name, version } = require('../../package.json');

module.exports                = Object.freeze({
    RUNTIME                   : Object.freeze({
        LIBRARY               : name,
        VERSION               : version,
        SYMBOL                : Object.freeze({
            DESCRIPTOR        : Symbol.for('@sap/xb-msg-amqp-v100/descriptor'),
            PRIMITIVE         : Symbol.for('@sap/xb-msg-amqp-v100/primitive'),
            PRIM_ITEM         : Symbol.for('@sap/xb-msg-amqp-v100/primitive/array/item/primitive'),
            DESC_ITEM         : Symbol.for('@sap/xb-msg-amqp-v100/primitive/array/item/descriptor'),
            PRIM_KEY          : Symbol.for('@sap/xb-msg-amqp-v100/primitive/map/key/primitive'),
            PRIM_VALUE        : Symbol.for('@sap/xb-msg-amqp-v100/primitive/map/value/primitive')
        })
    }),
    PROTOCOL                  : Object.freeze({
        WS                    : 'amqp',
        NAME                  : 'AMQP',
        ID                    : Object.freeze({
            SASL              : 0x03,
            AMQP              : 0x00
        }),
        VERSION               : Object.freeze({
            MAJOR             : 1,
            MINOR             : 0,
            REVISION          : 0
        }),
        PORT                  : Object.freeze({
            NET               : 5672,
            TLS               : 5671
        }),
        SIZE                  : 8
    }),
    FRAME                     : Object.freeze({
        TYPE                  : Object.freeze({
            AMQP              : 0x00,
            SASL              : 0x01
        }),
        SIZE                  : Object.freeze({
            HEADER            : 8,
            MINMAX            : 512
        })
    }),
    MESSAGE                   : Object.freeze({
        SIZE                  : Object.freeze({
            MINMAX            : 0x00000000000000FF
        })
    }),
    SASL                      : Object.freeze({
        OUTCOME               : Object.freeze({
            OK                : 0,
            AUTH              : 1,
            SYS               : 2,
            SYS_PERM          : 3,
            SYS_TEMP          : 4
        })
    }),
    PRIMITIVE                 : Object.freeze({
        MASK                  : Object.freeze({
            CATEGORY          : 0xF0,
            CODE              : 0x0F
        }),
        CATEGORY              : Object.freeze({
            FIX_0             : 0x40,
            FIX_1             : 0x50,
            FIX_2             : 0x60,
            FIX_4             : 0x70,
            FIX_8             : 0x80,
            FIX_16            : 0x90,
            VAR_1             : 0xA0,
            VAR_4             : 0xB0,
            CMP_1             : 0xC0,
            CMP_4             : 0xD0,
            ARR_1             : 0xE0,
            ARR_4             : 0xF0
        }),
    }),
    CONSTRUCT: Object.freeze({
        DESCRIPTOR            : 0x00,
        PRIMITIVE             : Object.freeze({
            SIMPLE            : Object.freeze({
                NULL          : 0x40,
                TRUE          : 0x41,
                FALSE         : 0x42,
                UINT0         : 0x43,
                ULONG0        : 0x44,

                UBYTE         : 0x50,
                BYTE          : 0x51,
                SMALLUINT     : 0x52,
                SMALLULONG    : 0x53,
                SMALLINT      : 0x54,
                SMALLLONG     : 0x55,
                BOOL          : 0x56,

                USHORT        : 0x60,
                SHORT         : 0x61,

                UINT          : 0x70,
                INT           : 0x71,
                FLOAT         : 0x72,
                CHAR          : 0x73,
                DEC32         : 0x74,

                ULONG         : 0x80,
                LONG          : 0x81,
                DOUBLE        : 0x82,
                TIMESTAMP     : 0x83,
                DEC64         : 0x84,

                DEC128        : 0x94,
                UUID          : 0x98,

                BIN8          : 0xA0,
                STR8          : 0xA1,
                SYM8          : 0xA3,

                BIN32         : 0xB0,
                STR32         : 0xB1,
                SYM32         : 0xB3,
            }),
            COMPLEX           : Object.freeze({
                LIST0         : 0x45,

                LIST8         : 0xC0,
                MAP8          : 0xC1,

                LIST32        : 0xD0,
                MAP32         : 0xD1,

                ARRAY8        : 0xE0,

                ARRAY32       : 0xF0,
            })
        })
    }),
    DESCRIPTOR                : Object.freeze({
        DOMAIN                : Object.freeze({     // https://www.iana.org/assignments/enterprise-numbers/enterprise-numbers
            AMQP              : 0x00000000,         // 0    : IANA Private Enterprise Number (PEN)
            SAP               : 0x00000286,         // 694  : SAP AG
            APACHE            : 0x0000468C          // 18060: The Apache Software Foundation
        }),
        SASL                  : Object.freeze({
            MECHANISMS        : 0x0000000000000040,
            INIT              : 0x0000000000000041,
            CHALLENGE         : 0x0000000000000042,
            RESPONSE          : 0x0000000000000043,
            OUTCOME           : 0x0000000000000044
        }),
        PERFORMATIVE          : Object.freeze({
            OPEN              : 0x0000000000000010,
            BEGIN             : 0x0000000000000011,
            ATTACH            : 0x0000000000000012,
            FLOW              : 0x0000000000000013,
            TRANSFER          : 0x0000000000000014,
            DISPOSITION       : 0x0000000000000015,
            DETACH            : 0x0000000000000016,
            END               : 0x0000000000000017,
            CLOSE             : 0x0000000000000018
        }),
        DELIVERY              : Object.freeze({
            RECEIVED          : 0x0000000000000023,
            ACCEPTED          : 0x0000000000000024,
            REJECTED          : 0x0000000000000025,
            RELEASED          : 0x0000000000000026,
            MODIFIED          : 0x0000000000000027,
        }),
        LINK                  : Object.freeze({
            SOURCE            : 0x0000000000000028,
            TARGET            : 0x0000000000000029,
        }),
        NODE                  : Object.freeze({
            LIFETIME_POLICY   : Object.freeze({
                DEL_ON_CLOSE  : 0x000000000000002B,
                DEL_NO_LINKS  : 0x000000000000002C,
                DEL_NO_MS     : 0x000000000000002D,
                DEL_NO_LN_MS  : 0x000000000000002E,
            }),
        }),
        MESSAGE               : Object.freeze({
            HEADER            : 0x0000000000000070, // list
            ANNOTATIONS       : Object.freeze({
                DELIVERY      : 0x0000000000000071, // annotations map
                MESSAGE       : 0x0000000000000072, // annotations map
            }),
            PROPERTIES        : Object.freeze({
                IMMUTABLE     : 0x0000000000000073, // list
                APPLICATION   : 0x0000000000000074, // map
            }),
            DATA              : Object.freeze({
                BINARY        : 0x0000000000000075, // opaque binary data
                SEQUENCE      : 0x0000000000000076, // list of structured elements
                VALUE         : 0x0000000000000077  // single AMQP value
            }),
            FOOTER            : 0x0000000000000078  // annotations map
        }),
        ERROR                 : 0x000000000000001D, // list
    }),
    VALUE                     : Object.freeze({
        PRIMITIVE             : Object.freeze({
            BOOLEAN           : Object.freeze({
                TRUE          : 0x01,
                FALSE         : 0x00
            }),
        }),
        SASL                  : Object.freeze({
            OUTCOME           : Object.freeze({
                OK            : 0,
                AUTH          : 1,
                SYS           : 2,
                SYS_PERM      : 3,
                SYS_TEMP      : 4
            })
        }),
        TRANSFER              : Object.freeze({
            MESSAGE_FORMAT    : Object.freeze({
                AMQP          : 0x00000000
            }),
            CONTENT_TYPE      : Object.freeze({
                AMQP          : 'amqp-1.0'
            }),
            OUTCOME           : Object.freeze({
                ACCEPTED      : 'accepted',
                REJECTED      : 'rejected',
                RELEASED      : 'released',
                MODIFIED      : 'modified'
            })
        }),
        TERMINUS              : Object.freeze({
            /**
             * @enum {number}
             * @private
             */
            DURABILITY        : Object.freeze({
                NONE          : 0,
                CONFIG        : 1,
                UNSETTLED     : 2
            }),
            /**
             * @enum {number}
             * @private
             */
            EXPIRY_POLICY     : Object.freeze({
                LINK_DETACH   : 'link-detach',
                SESSION_END   : 'session-end',
                CONN_CLOSE    : 'connection-close',
                NEVER         : 'never'
            })
        }),
        LINK                  : Object.freeze({
            /**
             * @enum {number}
             * @private
             */
            SND_SETTLE_MODE   : Object.freeze({
                UNSETTLED     : 0,
                SETTLED       : 1,
                MIXED         : 2
            }),
            /**
             * @enum {number}
             * @private
             */
            RCV_SETTLE_MODE: Object.freeze({
                FIRST         : 0,
                SECOND        : 1
            }),
            /**
             * @enum {number}
             * @private
             */
            DISTR_POLICY: Object.freeze({
                MOVE          : 'move',
                COPY          : 'copy'
            }),
            /**
             * @enum {number}
             * @private
             */
            MODE: Object.freeze({
                AT_MOST_ONCE  : { sndSettleMode : 1, rcvSettleMode : 0 },
                AT_LEAST_ONCE : { sndSettleMode : 0, rcvSettleMode : 0 },
                EXACTLY_ONCE  : { sndSettleMode : 0, rcvSettleMode : 1 }
            })
        })
    }),
    ERROR                     : Object.freeze({
        RUNTIME               : Object.freeze({
            INTERNAL          : 'amqp:internal-error',
            NOT_FOUND         : 'amqp:not-found',
            UNAUTHORIZED      : 'amqp:unauthorized-access',
            DECODE_ERROR      : 'amqp:decode-error',
            RES_LIMIT_EXCEED  : 'amqp:resource-limit-exceeded',
            NOT_ALLOWED       : 'amqp:not-allowed',
            INVALID_FIELD     : 'amqp:invalid-field',
            NOT_IMPLEMENTED   : 'amqp:not-implemented',
            RESOURCE_LOCKED   : 'amqp:resource-locked',
            PRECOND_FAILED    : 'amqp:precondition-failed',
            RESOURCE_DELETED  : 'amqp:resource-deleted',
            ILLEGAL_STATE     : 'amqp:illegal-state',
            FSIZE_TOO_SMALL   : 'amqp:frame-size-too-small'
        }),
        CONNECTION            : Object.freeze({
            FORCED            : 'amqp:connection:forced',
            FRAMING           : 'amqp:connection:framing-error',
            REDIRECT          : 'amqp:connection:redirect'
        }),
        SESSION               : Object.freeze({
            WINDOW_VIOLATION  : 'amqp:session:window-violation',
            ERRANT_LINK       : 'amqp:session:errant-link',
            HANDLE_IN_USE     : 'amqp:session:handle-in-use',
            HANDLE_UNATTACHED : 'amqp:session:unattached-handle'
        }),
        LINK                  : Object.freeze({
            DETACH_FORCED     : 'amqp:link:detach-forced',
            LIMIT_EXCEEDED    : 'amqp:link:transfer-limit-exceeded',
            MSG_SIZE_EXCEEDED : 'amqp:link:message-size-exceeded',
            LINK_REDIRECT     : 'amqp:link:redirect',
            LINK_STOLEN       : 'amqp:link:stolen'
        })
    })
});


