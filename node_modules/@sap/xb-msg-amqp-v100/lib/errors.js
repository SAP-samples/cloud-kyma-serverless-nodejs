'use strict';

const util = require('util');
const constants = require('./serialize/constants');
const AMQP = constants.ERROR;
const component = constants.RUNTIME.LIBRARY + ' ' + constants.RUNTIME.VERSION;

const EC = Object.freeze({

    DECODE_FRAME_SIZE_TOO_SMALL  : [ AMQP.CONNECTION.FRAMING         , '[101] decoder, frame size of %d below &d' ],
    DECODE_FRAME_SIZE_TOO_BIG    : [ AMQP.CONNECTION.FRAMING         , '[102] decoder, size of %d bytes exceeds max frame size of %d bytes'],
    DECODE_FRAME_SIZE_MISMATCH   : [ AMQP.RUNTIME.DECODE_ERROR       , '[103] decoder, size mismatch, expected %d, but reading %d bytes'],
    DECODE_PAYLOAD_SIZE_MISMATCH : [ AMQP.RUNTIME.DECODE_ERROR       , '[104] decoder, payload size mismatch, %d bytes remaining after payload reading completed'],
    DECODE_CODE_UNEXPECTED       : [ AMQP.RUNTIME.DECODE_ERROR       , '[105] decoder at offset %d, format code %d found, but expected %s'],
    DECODE_CODE_UNKNOWN          : [ AMQP.RUNTIME.DECODE_ERROR       , '[106] decoder at offset %d, format code %d unknown'],
    DECODE_VAL_NOT_EXPECTED      : [ AMQP.RUNTIME.DECODE_ERROR       , '[107] decoder at offset %d, value "%s" found, but expected %s'],
    DECODE_MISS_MAND_VAL         : [ AMQP.RUNTIME.DECODE_ERROR       , '[108] decoder at offset %d, mandatory composite field value missing (type %s)'],
    DECODE_UNSAFE_INT_VAL        : [ AMQP.RUNTIME.DECODE_ERROR       , '[109] decoder at offset %d, %s with unsafe 64bit integer value "%s", string fallback not enabled'],
    DECODE_INV_BIN_VAL_LEN       : [ AMQP.RUNTIME.DECODE_ERROR       , '[110] decoder at offset %d, binary value with %d bytes invalid, expected up to %d bytes'],
    DECODE_BLOCK_BYTES_MISMATCH  : [ AMQP.RUNTIME.DECODE_ERROR       , '[111] decoder at offset %d, block size exceeds declared block size by %d bytes'],
    DECODE_BLOCK_COUNT_MISMATCH  : [ AMQP.RUNTIME.DECODE_ERROR       , '[112] decoder at offset %d, block with %d items declared, but found %d items'],
    DECODE_DESC_MISMATCH         : [ AMQP.RUNTIME.DECODE_ERROR       , '[113] decoder at offset %d, descriptor value "%s" found, but "%s" expected'],
    DECODE_COMP_BYTES_MISMATCH   : [ AMQP.RUNTIME.DECODE_ERROR       , '[114] decoder at offset %d, composite "%s", more bytes declared than used by fields'],
    DECODE_COMP_TYPE_UNKNOWN     : [ AMQP.RUNTIME.DECODE_ERROR       , '[115] decoder at offset %d, composite descriptor "%s" unknown'],
    DECODE_COMP_TYPE_UNEXPECTED  : [ AMQP.RUNTIME.DECODE_ERROR       , '[116] decoder at offset %d, composite "%s" found, but "%s" expected'],
    DECODE_INV_MESSAGE_DATA      : [ AMQP.RUNTIME.DECODE_ERROR       , '[117] decoder at offset %d, invalid message data, found "%s", but expected "%s"'],
    DECODE_INV_MESSAGE_DATA_2ND  : [ AMQP.RUNTIME.DECODE_ERROR       , '[118] decoder at offset %d, invalid message data, found second "%s", but expected only one'],
    DECODE_INV_MESSAGE_SECTION   : [ AMQP.RUNTIME.DECODE_ERROR       , '[119] decoder at offset %d, invalid message data, found unknown section "%s"'],
    DECODE_PROTOCOL_ERROR        : [ AMQP.RUNTIME.INVALID_FIELD      , '[120] decoder, protocol negotiation error, field "%s" with value "%s", but expected "%s"'],
    DECODE_PROTOCOL_FAILURE      : [ AMQP.RUNTIME.INVALID_FIELD      , '[121] decoder, protocol negotiation error'],
    DECODE_BUFFER_END_REACHED    : [ AMQP.RUNTIME.DECODE_ERROR       , '[122] decoder, stream buffer underflow'],
    DECODE_MULTI_TRANSFER_ERROR  : [ AMQP.RUNTIME.ILLEGAL_STATE      , '[123] decoder, multi part transfer with value mismatch for "%s"'],
    DECODE_MAX_MESSAGE_SIZE      : [ AMQP.LINK.MSG_SIZE_EXCEEDED     , '[124] decoder, max message size reached for incoming link handle %d, limit at %d, message at %d'],

    ENCODE_FRAME_SIZE_TOO_BIG    : [ undefined                       , '[151] frame writer, size of %d bytes exceeds max frame size of %d bytes'],
    ENCODE_BLOCK_CONTROL_ERROR   : [ undefined                       , '[152] encoder at offset %d, frame writer, %d blocks opened, but %d expected'],
    ENCODE_MISS_MAND_VAL         : [ undefined                       , '[153] encoder at offset %d, mandatory data missing for "%s"'],
    ENCODE_INV_DESC_VAL          : [ undefined                       , '[154] encoder at offset %d, descriptor value type "%s" not supported, only n(N)umber (ULong) or s(S)tring (Symbol) allowed'],
    ENCODE_INV_BIN_VAL_LEN       : [ undefined                       , '[155] encoder at offset %d, binary value with %d bytes invalid, expected up to %d bytes'],
    ENCODE_INV_ARRAY_ITEM_TYPE   : [ undefined                       , '[156] encoder at offset %d, array item type "%s" not supported'],
    ENCODE_INV_COMP_TYPE         : [ undefined                       , '[157] encoder at offset %d, composite "%s" serializes type %d, expected %s'],
    ENCODE_VALUE_TYPE_MISMATCH   : [ undefined                       , '[158] encoder at offset %d, data type "%s" cannot be encoded as %s'],
    ENCODE_VALUE_TYPE_NO_SUPPORT : [ undefined                       , '[159] encoder at offset %d, data type "%s" cannot be encoded'],
    ENCODE_INV_MESSAGE_DATA      : [ undefined                       , '[160] encoder at offset %d, data type "%s" cannot be encoded in message payload type %d'],
    ENCODE_SASL_DATA_TOO_BIG     : [ undefined                       , '[161] encoder at offset %d, sasl data exceed maximum frame size of 512 bytes (check values with variable length)'],
    ENCODE_PERF_DATA_TOO_BIG     : [ undefined                       , '[162] encoder at offset %d, performative "%s", data exceed maximum frame size of %d bytes (check values with variable length, maps, arrays and lists)'],
    ENCODE_INV_PAYLOAD_TYPE      : [ undefined                       , '[163] encoder, payload type "%s" not supported, use null, Buffer, Array of Buffer or single instance of Payload (-like class)'],
    ENCODE_INV_PAYLOAD_CHUNKS    : [ undefined                       , '[164] encoder, payload.chunks type "%s" not supported, use Array of Buffer'],

    OPT_INV_TYPE                 : [ undefined                       , '[201] application error, invalid arguments for "%s", expected type "%s"'],
    OPT_INV_DATA                 : [ undefined                       , '[202] application error, invalid arguments for "%s"'],
    OPT_INV_DATA_EXPECT          : [ undefined                       , '[203] application error, invalid arguments for "%s", expected "%s"'],
    OPT_INV_URI                  : [ undefined                       , '[204] application error: invalid arguments for uri schema "%s"'],

    VAL_TYPE_MISMATCH            : [ undefined                       , '[240] application error: value type "%s" not applicable for data type "%s"'],
    VAL_TYPE_INT_RANGE           : [ undefined                       , '[241] application error: value type "%s" expects integer between %d and %d'],

    WS_UPGRADE_REQUEST_ABORTED   : [ undefined                       , '[251] web socket error, upgrade request aborted by broker'],
    WS_UPGRADE_REQUEST_FAILED    : [ undefined                       , '[252] web socket error, upgrade request failed, code %d %s, %s'],
    WS_UPGRADE_ACCEPT_MISMATCH   : [ undefined                       , '[253] web socket error, upgrade request sec-websocket-accept does not match sec-websocket-key'],
    WS_UPGRADE_HEADER_MISSING    : [ undefined                       , '[254] web socket error, upgrade request invalid, field "%s" missing'],
    WS_MASK_NOT_EXPECTED         : [ undefined                       , '[255] web socket error, mask not expected at inbound datagram'],
    WS_INV_PAYLOAD_LENGTH        : [ undefined                       , '[256] web socket error, length "%s" not supported, exeeds node js max-safe-integer'],
    WS_CODE_TEXT_NOT_EXPECTED    : [ undefined                       , '[257] web socket error, text message not expected for sub-protocol amqp'],
    WS_CLOSE_ERROR               : [ undefined                       , '[258] web socket closed with code %s %s'],

    OAUTH_NO_ACCESS_TOKEN        : [ undefined                       , '[301] oauth error, no access token received from endpoint'],
    OAUTH_RESPONSE_ERROR         : [ undefined                       , '[302] oauth response error: %s'],
    OAUTH_REQUEST_FAILED         : [ undefined                       , '[303] oauth request failed, code %s data %s'],

    SASL_MECHANISM_MISMATCH      : [ AMQP.RUNTIME.UNAUTHORIZED       , '[351] sasl mechanism mismatch, client requests "%s", server supports "%s"'],
    SASL_MECHANISM_NO_SUPPORT    : [ AMQP.RUNTIME.NOT_IMPLEMENTED    , '[352] sasl mechanism "%s" not supported, options invalid'],
    SASL_FRAME_UNEXPECTED        : [ AMQP.RUNTIME.ILLEGAL_STATE      , '[353] sasl protocol error, unexpected frame "%s" received'],
    SASL_FRAME_TOO_EARLY         : [ AMQP.RUNTIME.ILLEGAL_STATE      , '[354] sasl protocol error, frame "%s" received too early'],
    SASL_INV_CREDENTIAL_DATA     : [ AMQP.RUNTIME.UNAUTHORIZED       , '[355] sasl protocol error, invalid credential data for mechanism "%s"'],
    SASL_INV_VALIDATE_CALLBACK   : [ undefined                       , '[356] sasl validate result not expected (anymore)'],
    SASL_CHALLENGE_UNEXPECTED    : [ AMQP.RUNTIME.ILLEGAL_STATE      , '[357] sasl protocol error, non-initial challenge for mechanism "%s"'],
    SASL_OUTCOME_UNEXPECTED      : [ undefined                       , '[358] sasl mechanism "%s" failed, outcome code %d unexpected'],
    SASL_OUTCOME_AUTH            : [ undefined                       , '[359] sasl mechanism "%s" failed due to an unspecified problem with the supplied credentials'],
    SASL_OUTCOME_SYS             : [ undefined                       , '[360] sasl mechanism "%s" failed due to a system error'],
    SASL_OUTCOME_SYS_PERM        : [ undefined                       , '[361] sasl mechanism "%s" failed due to a system error that is unlikely to be corrected without intervention'],
    SASL_OUTCOME_SYS_TEMP        : [ undefined                       , '[362] sasl mechanism "%s" failed due to a transient system error'],

    CLIENT_MISS_DEST             : [ undefined                       , '[401] connection error, missing connection data, provide client options either for tls, net, wss or ws'],
    CLIENT_STATE_ERROR           : [ undefined                       , '[402] client state error on %s, already in state "%s"'],
    CLIENT_CONNECT_RETRY         : [ undefined                       , '[403] retry connect using alternative destination %d'],
    CLIENT_CONNECT_REFUSED       : [ undefined                       , '[404] connect failed, service not available (ECONNREFUSED)'],
    CLIENT_CONNECT_TIMEOUT       : [ undefined                       , '[405] connect failed, no response received (ETIMEDOUT)'],
    CLIENT_CONNECT_FAILURE       : [ undefined                       , '[406] connect failed, connection closed unexpectedly'],

    SERVER_INV_CONN_DATA         : [ undefined                       , '[451] server error, invalid connection data, define either "tls", "net", "wss" or "ws"'],
    SERVER_INV_CONN_TYPE         : [ undefined                       , '[452] server error, invalid connection type "%s", use either "tls", "net", "wss" or "ws"'],

    IDLE_TIMEOUT_DISCONNECT      : [ AMQP.CONNECTION.FORCED          , '[453] idle timeout reached (%d ms)'],

    INBOUND_INTERNAL_ERROR       : [ AMQP.RUNTIME.INTERNAL           , '[500] internal error, code %s'],
    FRAME_TYPE_NOT_EXPECTED      : [ AMQP.RUNTIME.ILLEGAL_STATE      , '[501] frame type "%s" not expected'],
    HANDLE_LIMIT_REACHED         : [ AMQP.RUNTIME.RES_LIMIT_EXCEED   , '[502] failed to generate new handle, limit of %d reached'],
    EP_STATE_ERROR               : [ undefined                       , '[503] %s state "%s" does not allow action "%s"'],
    EP_NAME_INVALID              : [ undefined                       , '[504] %s name "%s" invalid'],
    CHANNEL_HANDLE_OUT_OF_RANGE  : [ AMQP.CONNECTION.FRAMING         , '[505] incoming channel handle %d out of range, max handle value %d'],
    CHANNEL_HANDLE_IN_USE        : [ AMQP.RUNTIME.PRECOND_FAILED     , '[506] incoming channel handle %d already in use'],
    CHANNEL_HANDLE_OVERRIDE      : [ AMQP.RUNTIME.PRECOND_FAILED     , '[507] incoming channel handle %d cannot begin session with local handle %d, session already uses incoming handle %d'],
    CHANNEL_HANDLE_UNKNOWN_OUT   : [ AMQP.RUNTIME.PRECOND_FAILED     , '[508] outgoing channel handle %d not in use'],
    CHANNEL_HANDLE_UNKNOWN_IN    : [ AMQP.RUNTIME.PRECOND_FAILED     , '[508] incoming channel handle %d not in use'],
    LINK_HANDLE_OUT_OF_RANGE     : [ AMQP.CONNECTION.FRAMING         , '[509] input link handle %d out of range, max handle value %d for link "%s"'],
    LINK_HANDLE_IN_USE           : [ AMQP.SESSION.HANDLE_IN_USE      , '[510] input link handle %d already in use for link "%s"'],
    LINK_HANDLE_OVERRIDE         : [ AMQP.RUNTIME.PRECOND_FAILED     , '[511] input link handle %d cannot be assigned to link "%s", already attached with %d'],
    LINK_HANDLE_UNKNOWN          : [ AMQP.SESSION.HANDLE_UNATTACHED  , '[512] input link handle %d not in use'],

    LINK_SETTLE_MODE_MISMATCH    : [ AMQP.RUNTIME.PRECOND_FAILED     , '[520] transfer received with settled "%s", but "%s" negotiated on link attach'],
    SENDER_DISPOSITION_UNSETTLED : [ AMQP.RUNTIME.PRECOND_FAILED     , '[521] sender disposition not settled for delivery %d, may lead to endless disposition loop'],
    LINK_CREDIT_ALREADY_CONSUMED : [ AMQP.RUNTIME.RES_LIMIT_EXCEED   , '[522] link credit underflow for incoming link handle %d'],
    INCOMING_WINDOW_SEQUENCE     : [ AMQP.SESSION.WINDOW_VIOLATION   , '[523] incoming window sequence mismatch at incoming channel %d, incoming link %d, delivery %d not expected' ],
    INCOMING_WINDOW_OVERFLOW     : [ AMQP.SESSION.WINDOW_VIOLATION   , '[524] incoming window overflow at incoming channel %d, incoming link %d, delivery %d, unsettled map already at %d' ],

    MSG_DONE_NOT_EXPECTED        : [ undefined                       , '[601] incoming delivery %d already settled by application, further callback not expected'],
    MSG_REJECTED_BY_PEER         : [ undefined                       , '[602] outgoing transfer outcome "rejected"'],
    MSG_REJECTED_AFTER_DETACH    : [ AMQP.LINK.DETACH_FORCED         , '[603] incoming delivery %d rejected, link %d forced to detach'],

    UNIFIED_ISTREAM_INV_OPT      : [ undefined                       , '[701] invalid unified istream options for "%s"'],
    UNIFIED_ISTREAM_INV_ID       : [ undefined                       , '[702] invalid unified istream id "%s"'],
    UNIFIED_OSTREAM_INV_OPT      : [ undefined                       , '[703] invalid unified ostream options for "%s"'],
    UNIFIED_OSTREAM_INV_ID       : [ undefined                       , '[704] invalid unified ostream id "%s"']

});

const REGX_ERRNO = new RegExp(component + ' ' + '\\[(\\d{3})\\]');

/**
 * @param {Array<string>} code
 * @param {...*} params
 * @return {!Error}
 * @private
 */
function ErrMsg(code, ...params) {
    const message = util.format(component + ' ' + code[1], ...params);
    return code[0] ? new AmqpError(code[0], message) : new Error(message);
}

/**
 * @param {Error|*} error
 * @return {AmqpError}
 * @private
 */
function ErrMsgToPeer(error) {
    if (error === null) {
        return null;
    } else if (error instanceof AmqpError) {
        return error;
    } else {
        const res = REGX_ERRNO.exec(error.message);
        const dsc = res ? util.format(component + ' ' + EC.INBOUND_INTERNAL_ERROR[1], res[1]) : error.message;
        return new AmqpError(AMQP.RUNTIME.INTERNAL, dsc, null);
    }
}

/**
 * @param values
 * @return {string}
 * @private
 */
function ErrOpt(...values) {
    return '[ ' + values.join(' | ') + ' ]';
}

/**
 * @param value
 * @return {string}
 * @private
 */
function ErrOptSet(value) {
    return '[ ' + Array.from(value).join(' | ') + ' ]';
}

/**
 * @param {!Error} error
 * @param {NotifyOfFailed=} callback
 * @param {Object=} emitter
 * @private
 */
function Raise(error, callback, emitter) {
    if (typeof callback === 'function')
        callback(error);
    else if (emitter)
        emitter.emit('error', error);
}

/**
 * An error that can be sent to peer, e.g. when rejecting a message.
 */
class AmqpError extends Error {

    /**
     * @param {string} condition
     * @param {string} description
     * @param {Object=} info
     */
    constructor(condition, description, info = null) {
        const iMap = objToMap(info);

        // noinspection JSCheckFunctionSignatures
        super(
            description +
            ( condition ? util.format(' [%s]', condition) : '') +
            ( iMap ? util.format(' [%s]', mapToTxt(iMap)) : '')
        );

        /**
         * @type {string}
         */
        this.condition = condition;

        /**
         * @type {string}
         */
        this.description = description;

        /**
         * @type {Fields}
         */
        this.info = iMap;
    }

}

/**
 * @param {Object|Map} value
 * @return {Map}
 */
function objToMap(value) {
    if (typeof value === 'object' && value !== null) {
        if (value instanceof Map) {
            return value;
        }
        if (value.constructor.name === 'Object') {
            const res = new Map();
            for (const k of Object.getOwnPropertyNames(value)) {
                res.set(k, value[k]);
            }
            return res;
        }
    }
    return null;
}

/**
 * @param {Map} value
 * @return {string}
 */
function mapToTxt(value) {
    if (value) {
        const list = [];
        for (const [key, val] of value) {
            list.push(util.format('%s: %s', key, val));
        }
        return list.join('; ');
    }
    return '';
}

AmqpError.CONDITION = AMQP;

module.exports = {
    EC : EC,
    ErrMsg : ErrMsg,
    ErrMsgToPeer : ErrMsgToPeer,
    Raise : Raise,
    ErrOpt : ErrOpt,
    ErrOptSet : ErrOptSet,
    AmqpError : AmqpError
};

