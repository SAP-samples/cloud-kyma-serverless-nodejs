'use strict';

const { ErrMsgToPeer, AmqpError } = require('../errors');
const { Composite } = require('../serialize/types');
const constants = require('../serialize/constants');
const LIST0 = constants.CONSTRUCT.PRIMITIVE.COMPLEX.LIST0;
const LIST8 = constants.CONSTRUCT.PRIMITIVE.COMPLEX.LIST8;
const LIST32 = constants.CONSTRUCT.PRIMITIVE.COMPLEX.LIST32;
const RECEIVED = constants.DESCRIPTOR.DELIVERY.RECEIVED;
const ACCEPTED = constants.DESCRIPTOR.DELIVERY.ACCEPTED;
const REJECTED = constants.DESCRIPTOR.DELIVERY.REJECTED;
const RELEASED = constants.DESCRIPTOR.DELIVERY.RELEASED;
const MODIFIED = constants.DESCRIPTOR.DELIVERY.MODIFIED;
const SOURCE = constants.DESCRIPTOR.LINK.SOURCE;
const TARGET = constants.DESCRIPTOR.LINK.TARGET;
const ERROR = constants.DESCRIPTOR.ERROR;

/*********************************************************************************************************************/
/** defined types: transport layer ***********************************************************************************/
/*********************************************************************************************************************/

/**
 * @typedef {Bool} RoleReceiver - (true === receiver, false === sender)
 */

/**
 * @typedef {UByte} SndSettleMode - (0 === unsettled, 1 === settled, 2 === mixed)
 */

/**
 * @typedef {UByte} RcvSettleMode - (0 === first, 1 === second)
 */

/**
 * @typedef {StringValue} LinkName
 */

/**
 * @typedef {UInt} LinkHandle
 */

/**
 * @typedef {UInt} Seconds
 */

/**
 * @typedef {UInt} Milliseconds
 */

/**
 * @typedef {BinaryString} DeliveryTag - binary, up to 32 bytes
 */

/**
 * @typedef {Map<DeliveryTag, DeliveryState>} UnsettledMap
 */

/**
 * @typedef {SequenceNumber} DeliveryNumber
 */

/**
 * @typedef {SequenceNumber} TransferNumber
 */

/**
 * @typedef {UInt} SequenceNumber
 */

/**
 * @typedef {UInt} MessageFormat - (0 === spec format)
 */

/**
 * @typedef {SymbolValue} IetfLanguageTag
 */

/**
 * @typedef {Map<SymbolValue, *>} Fields
 */

/*********************************************************************************************************************/
/** defined types: messaging layer ***********************************************************************************/
/*********************************************************************************************************************/

/**
 * @typedef {Map<SymbolValue, *>} MessageAnnotations
 */

/**
 * @typedef {Map<StringValue, *>} ApplicationProperties
 */

/**
 * @typedef {ULong|UUID|BinaryValue|StringValue} MessageID
 */

/**
 * @typedef {StringValue} AddressString
 */

/**
 * @typedef {UInt} TerminusDurability - (0 === none, 1 === configuration, 2 === unsettledState)
 */

/**
 * @typedef {SymbolValue} TerminusExpiryPolicy - ('link-detach', 'session-end', 'connection-close', 'never')
 */

/**
 * @typedef {Fields} NodeProperties
 */

/**
 * @typedef {SymbolValue} DistributionMode - ('move', 'copy')
 */

/**
 * @typedef {Array<DistributionMode>} DistributionModeArray
 */

/**
 * @typedef {Map<SymbolValue, *>} FilterSet
 */

/**
 * @typedef {Buffer|Array<Buffer>|Payload} MessagePayload
 */

/*********************************************************************************************************************/
/** defined types: messaging runtime *********************************************************************************/
/*********************************************************************************************************************/

/**
 * @callback NotifyOfTransferStarted
 * @private
 */

/**
 * @callback NotifyOfTransferSplit
 * @private
 */

/**
 * @callback NotifyOfTransferDispose
 * @param {Disposition} frame
 * @return {boolean}
 * @private
 */

/**
 * @callback NotifyOfTransferFailure
 * @param {Error} error
 * @private
 */

/*********************************************************************************************************************/
/** implemented types: transport and messaging layer *****************************************************************/
/*********************************************************************************************************************/

/**
 * @abstract
 * @private
 */
class DeliveryState extends Composite {

    /**
     * @param {Descriptor} descriptor
     */
    constructor(descriptor) {
        super(descriptor);
    }

}

/**
 * @abstract
 * @private
 */
class DeliveryOutcome extends DeliveryState {

    /**
     * @param {Descriptor} descriptor
     */
    constructor(descriptor) {
        super(descriptor);
    }

}

/**
 * @private
 * @final
 */
class DeliveryReceived extends DeliveryState {

    /**
     * @param {UInt=} number
     * @param {ULong=} offset
     */
    constructor(number, offset) {
        super(RECEIVED);

        /**
         * @type {?UInt}
         */
        this.sectionNumber = (number === undefined) ? null : number;

        /**
         * @type {?ULong}
         */
        this.sectionOffset = (offset === undefined) ? null : offset;
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return LIST8;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        encoder.writeUInt(true, this.sectionNumber);
        encoder.writeULong(true, this.sectionOffset);
        return 2;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
        this.sectionNumber = decoder.readUInt(true, scope);
        this.sectionOffset = decoder.readULong(true, scope, false);
    }

}

/**
 * @private
 * @final
 */
class DeliveryAccepted extends DeliveryOutcome {

    /**
     *
     */
    constructor() {
        super(ACCEPTED);
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return LIST0;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        return 0;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {

    }

}

/**
 * @private
 * @final
 */
class DeliveryRejected extends DeliveryOutcome {

    /**
     * @param {Error=} error
     */
    constructor(error = null) {
        super(REJECTED);

        /**
         * @type {?ErrorValue}
         */
        this.error = error ? new ErrorValue(error) : null;
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return this.error ? LIST32 : LIST0;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        encoder.writeComposite(false, this.error);
        return 1;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
        this.error = decoder.readComposite(false, scope, buildComposite, ErrorValue);
    }

}

/**
 * @private
 * @final
 */
class DeliveryReleased extends DeliveryOutcome {

    /**
     *
     */
    constructor() {
        super(RELEASED);
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return LIST0;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        return 0;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {

    }

}

/**
 * @private
 * @final
 */
class DeliveryModified extends DeliveryOutcome {

    /**
     * @param {Bool=} failed
     * @param {Bool=} undeliverable
     * @param {Fields=} annotations
     */
    constructor(failed, undeliverable, annotations) {
        super(MODIFIED);

        /**
         * @type {?boolean}
         */
        this.deliveryFailed = (failed === undefined) ? null : failed;

        /**
         * @type {?boolean}
         */
        this.undeliverableHere = (undeliverable === undefined) ? null : undeliverable;

        /**
         * @type {?Fields}
         */
        this.messageAnnotations = (annotations === undefined) ? null : annotations;
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return this.messageAnnotations ? LIST32 : LIST8;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        encoder.writeBool(false, this.deliveryFailed);
        encoder.writeBool(false, this.undeliverableHere);
        encoder.writeFields(false, this.messageAnnotations);
        return 3;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
        this.deliveryFailed = decoder.readBool(false, scope);
        this.undeliverableHere = decoder.readBool(false, scope);
        this.messageAnnotations = decoder.readFields(false, scope);
    }

}

/**
 * @private
 * @final
 */
class LinkSource extends Composite {

    /**
     *
     */
    constructor() {
        super(SOURCE);

        /**
         * @type {?AddressString}
         */
        this.address = null;

        /**
         * @type {?TerminusDurability}
         */
        this.durable = null;

        /**
         * @type {?TerminusExpiryPolicy}
         */
        this.expires = null;

        /**
         * @type {?Seconds}
         */
        this.timeout = null;

        /**
         * @type {?Bool}
         */
        this.dynamic = null;

        /**
         * @type {?NodeProperties}
         */
        this.dynamicProperties = null;

        /**
         * @type {?DistributionMode}
         */
        this.distributionMode = null;

        /**
         * @type {?FilterSet}
         */
        this.filter = null;

        /**
         * @type {?DeliveryOutcome}
         */
        this.defaultOutcome = null;

        /**
         * @type {?SymbolArray}
         */
        this.outcomes = null;

        /**
         * @type {?SymbolArray}
         */
        this.capabilities = null;
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return LIST32;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        encoder.writeString(false, this.address);
        encoder.writeUInt(false, this.durable);
        encoder.writeSymbol(false, this.expires);
        encoder.writeUInt(false, this.timeout);
        encoder.writeBool(false, this.dynamic);
        encoder.writeFields(false, this.dynamicProperties);
        encoder.writeSymbol(false, this.distributionMode);
        encoder.writeFields(false, this.filter);
        encoder.writeComposite(false, this.defaultOutcome);
        encoder.writeSymbols(false, this.outcomes);
        encoder.writeSymbols(false, this.capabilities);
        return 11;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
        this.address = decoder.readString(false, scope);
        this.durable = decoder.readUInt(false, scope);
        this.expires = decoder.readSymbol(false, scope);
        this.timeout = decoder.readUInt(false, scope);
        this.dynamic = decoder.readBool(false, scope);
        this.dynamicProperties = decoder.readFields(false, scope);
        this.distributionMode = decoder.readSymbol(false, scope);
        this.filter = decoder.readFields(false, scope);
        this.defaultOutcome = decoder.readComposite(false, scope, buildComposite, DeliveryOutcome);
        this.outcomes = decoder.readSymbols(false, scope);
        this.capabilities = decoder.readSymbols(false, scope);
    }

}

/**
 * @private
 * @final
 */
class LinkTarget extends Composite {

    /**
     *
     */
    constructor() {
        super(TARGET);

        /**
         * @type {?AddressString}
         */
        this.address = null;

        /**
         * @type {?TerminusDurability}
         */
        this.durable = null;

        /**
         * @type {?TerminusExpiryPolicy}
         */
        this.expires = null;

        /**
         * @type {?Seconds}
         */
        this.timeout = null;

        /**
         * @type {?Bool}
         */
        this.dynamic = null;

        /**
         * @type {?NodeProperties}
         */
        this.dynamicProperties = null;

        /**
         * @type {?SymbolArray}
         */
        this.capabilities = null;
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return LIST32;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        encoder.writeString(false, this.address);
        encoder.writeUInt(false, this.durable);
        encoder.writeSymbol(false, this.expires);
        encoder.writeUInt(false, this.timeout);
        encoder.writeBool(false, this.dynamic);
        encoder.writeFields(false, this.dynamicProperties);
        encoder.writeSymbols(false, this.capabilities);
        return 7;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
        this.address = decoder.readString(false, scope);
        this.durable = decoder.readUInt(false, scope);
        this.expires = decoder.readSymbol(false, scope);
        this.timeout = decoder.readUInt(false, scope);
        this.dynamic = decoder.readBool(false, scope);
        this.dynamicProperties = decoder.readFields(false, scope);
        this.capabilities = decoder.readSymbols(false, scope);
    }

}

/**
 * @private
 * @final
 */
class ErrorValue extends Composite {

    /**
     * @param {Error=} object
     */
    constructor(object = null) {
        const error = ErrMsgToPeer(object);

        /**
         *
         */
        super(ERROR);

        /**
         * @type {?SymbolValue}
         */
        this.condition = error ? error.condition : null;

        /**
         * @type {?StringValue}
         */
        this.description = error ? error.description : null;

        /**
         * @type {?Fields}
         */
        this.info = error ? error.info : null;
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return (this.description || this.info) ? LIST32 : LIST8;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        encoder.writeSymbol(true, this.condition);
        encoder.writeString(false, this.description);
        encoder.writeFields(false, this.info);
        return 3;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
        this.condition = decoder.readSymbol(true, scope);
        this.description = decoder.readString(false, scope);
        this.info = decoder.readFields(false, scope);
    }

    /**
     * @return {!AmqpError}
     */
    toObject() {
        return new AmqpError(this.condition, this.description, this.info);
    }

}

/**
 * @param {!Descriptor} desc
 * @return {*}
 * @private
 */
function buildComposite(desc) {
    switch (desc) {
        case RECEIVED:
            return new DeliveryReceived();
        case ACCEPTED:
            return new DeliveryAccepted();
        case REJECTED:
            return new DeliveryRejected();
        case RELEASED:
            return new DeliveryReleased();
        case MODIFIED:
            return new DeliveryModified();
        case SOURCE:
            return new LinkSource();
        case TARGET:
            return new LinkTarget();
        case ERROR:
            return new ErrorValue();
        default:
            return null;
    }
}

module.exports = {
    buildComposite : buildComposite,
    DeliveryState : DeliveryState,
    DeliveryReceived : DeliveryReceived,
    DeliveryAccepted : DeliveryAccepted,
    DeliveryRejected : DeliveryRejected,
    DeliveryReleased : DeliveryReleased,
    DeliveryModified : DeliveryModified,
    LinkSource : LinkSource,
    LinkTarget : LinkTarget,
    ErrorValue : ErrorValue,
};

