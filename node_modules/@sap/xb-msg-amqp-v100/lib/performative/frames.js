'use strict';

const { EC, ErrMsg, ErrOpt } = require('../errors');
const { Frame } = require('../serialize/types');
const { LinkSource, LinkTarget, DeliveryState, ErrorValue, buildComposite } = require('./types');
const { Message } = require('./message');

const constants = require('../serialize/constants');
const PROTOCOL = constants.PROTOCOL;
const TYPE = /** @type {FrameType} */ (constants.FRAME.TYPE.AMQP);

const LIST0 = constants.CONSTRUCT.PRIMITIVE.COMPLEX.LIST0;
const LIST8 = constants.CONSTRUCT.PRIMITIVE.COMPLEX.LIST8;
const LIST32 = constants.CONSTRUCT.PRIMITIVE.COMPLEX.LIST32;

const OPEN = constants.DESCRIPTOR.PERFORMATIVE.OPEN;
const BEGIN = constants.DESCRIPTOR.PERFORMATIVE.BEGIN;
const ATTACH = constants.DESCRIPTOR.PERFORMATIVE.ATTACH;
const FLOW = constants.DESCRIPTOR.PERFORMATIVE.FLOW;
const TRANSFER = constants.DESCRIPTOR.PERFORMATIVE.TRANSFER;
const DISPOSITION = constants.DESCRIPTOR.PERFORMATIVE.DISPOSITION;
const DETACH = constants.DESCRIPTOR.PERFORMATIVE.DETACH;
const END = constants.DESCRIPTOR.PERFORMATIVE.END;
const CLOSE = constants.DESCRIPTOR.PERFORMATIVE.CLOSE;

/**
 *               type: 0x00 - AMQP frame
 *
 *            +0       +1       +2       +3
 *        +-----------------------------------+ -.
 *      0 |                SIZE               |  |
 *        +-----------------------------------+  |---> Frame Header
 *      4 |  DOFF  |  TYPE  |     CHANNEL     |  |      (8 bytes)
 *        +-----------------------------------+ -'
 *        +-----------------------------------+ -.
 *      8 |                ...                |  |
 *        .                                   .  |---> Extended Header
 *        .             <IGNORED>             .  |  (DOFF * 4 - 8) bytes
 *        |                ...                |  |
 *        +-----------------------------------+ -'
 *        +-----------------------------------+ -.
 * 4*DOFF |           PERFORMATIVE:           |  |
 *        .      Open / Begin / Attach        .  |
 *        .   Flow / Transfer / Disposition   .  |
 *        .      Detach / End / Close         .  |
 *        |-----------------------------------|  |
 *        .                                   .  |---> Frame Body
 *        .                                   .  |  (SIZE - DOFF * 4) bytes
 *        .             PAYLOAD               .  |
 *        .                                   .  |
 *        .                           ________|  |
 *        |                ...       |           |
 *        +--------------------------+          -'
 *
 */

/**
 * @abstract
 * @private
 */
class AmqpFrame extends Frame {

    /**
     * @param {!Descriptor} descriptor
     */
    constructor(descriptor) {
        super(TYPE, descriptor);
    }

    /**
     * @param {!Encoder} encoder
     */
    encodeData(encoder) {
        encoder.writeComposite(true, this);
    }

    /**
     * @param {!Encoder} encoder
     */
    encodeMore(encoder) {
        throw ErrMsg(EC.ENCODE_PERF_DATA_TOO_BIG, this.constructor.name, encoder.maxFrameSize);
    }

    /**
     * @param {!Encoder} encoder
     */
    encodeDone(encoder) {
    }

    /**
     * @param {!Decoder} decoder
     * @return {boolean} - ready
     */
    decodeData(decoder) {
        decoder.readCompositeValue(this);
        return true;
    }

}

/**
 * @private
 * @final
 */
class Empty extends AmqpFrame {

    constructor() {
        super(0);
    }
    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return LIST0;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        return 0;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
    }

    /**
     * @param {!Encoder} encoder
     */
    encodeData(encoder) {
    }

    /**
     * @param {!Decoder} decoder
     * @return {boolean} - ready
     */
    decodeData(decoder) {
        return true;
    }

}

/**
 * @private
 * @final
 */
class Open extends AmqpFrame {

    /**
     *
     */
    constructor() {
        super(OPEN);

        /**
         * @type {?StringValue}
         */
        this.containerID = null;

        /**
         * @type {?StringValue}
         */
        this.hostname = null;

        /**
         * @type {?UInt}
         */
        this.maxFrameSize = 0;

        /**
         * @type {?UShort}
         */
        this.channelMax = 0;

        /**
         * @type {?Milliseconds}
         */
        this.idleTimeout = 0;

        /**
         * @type {?IetfLanguageTag}
         */
        this.outgoingLocales = null;

        /**
         * @type {?IetfLanguageTag}
         */
        this.incomingLocales = null;

        /**
         * @type {?SymbolArray}
         */
        this.offered = null;

        /**
         * @type {?SymbolArray}
         */
        this.desired = null;

        /**
         * @type {?Fields}
         */
        this.properties = null;
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return LIST32;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        encoder.writeString(true, this.containerID);
        encoder.writeString(false, this.hostname);
        encoder.writeUInt(false, this.maxFrameSize);
        encoder.writeUShort(false, this.channelMax);
        encoder.writeUInt(false, this.idleTimeout);
        encoder.writeSymbol(false, this.outgoingLocales);
        encoder.writeSymbol(false, this.incomingLocales);
        encoder.writeSymbols(false, this.offered);
        encoder.writeSymbols(false, this.desired);
        encoder.writeFields(false, this.properties);
        return 10;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
        this.containerID = decoder.readString(true, scope);
        this.hostname = decoder.readString(false, scope);
        this.maxFrameSize = decoder.readUInt(false, scope);
        this.channelMax = decoder.readUShort(false, scope);
        this.idleTimeout = decoder.readUInt(false, scope);
        this.outgoingLocales = decoder.readSymbol(false, scope);
        this.incomingLocales = decoder.readSymbol(false, scope);
        this.offered = decoder.readSymbols(false, scope);
        this.desired = decoder.readSymbols(false, scope);
        this.properties = decoder.readFields(false, scope);
    }

}

/**
 * @private
 * @final
 */
class Begin extends AmqpFrame {

    /**
     *
     */
    constructor() {
        super(BEGIN);

        /**
         * @type {?ChannelHandle}
         */
        this.remoteChannel = null;

        /**
         * @type {?TransferNumber}
         */
        this.nextOutgoingID = 0;

        /**
         * @type {?UInt}
         */
        this.incomingWindow = 0;

        /**
         * @type {?UInt}
         */
        this.outgoingWindow = 0;

        /**
         * @type {?LinkHandle}
         */
        this.handleMax = 0;

        /**
         * @type {?SymbolArray}
         */
        this.offered = null;

        /**
         * @type {?SymbolArray}
         */
        this.desired = null;

        /**
         * @type {?Fields}
         */
        this.properties = null;
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return LIST32;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        encoder.writeUShort(false, this.remoteChannel);
        encoder.writeUInt(true, this.nextOutgoingID);
        encoder.writeUInt(true, this.incomingWindow);
        encoder.writeUInt(true, this.outgoingWindow);
        encoder.writeUInt(false, this.handleMax);
        encoder.writeSymbols(false, this.offered);
        encoder.writeSymbols(false, this.desired);
        encoder.writeFields(false, this.properties);
        return 8;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
        this.remoteChannel = decoder.readUShort(false, scope);
        this.nextOutgoingID = decoder.readUInt(true, scope);
        this.incomingWindow = decoder.readUInt(true, scope);
        this.outgoingWindow = decoder.readUInt(true, scope);
        this.handleMax = decoder.readUInt(false, scope);
        this.offered = decoder.readSymbols(false, scope);
        this.desired = decoder.readSymbols(false, scope);
        this.properties = decoder.readFields(false, scope);
    }

}

/**
 * @private
 * @final
 */
class Attach extends AmqpFrame {

    /**
     *
     */
    constructor() {
        super(ATTACH);

        /**
         * @type {?LinkName}
         */
        this.name = null;

        /**
         * @type {?LinkHandle}
         */
        this.handle = null;

        /**
         * @type {?RoleReceiver}
         */
        this.roleReceiver = null;

        /**
         * @type {?SndSettleMode}
         */
        this.sndSettleMode = null;

        /**
         * @type {?RcvSettleMode}
         */
        this.rcvSettleMode = null;

        /**
         * @type {?LinkSource}
         */
        this.source = null;

        /**
         * @type {?LinkTarget}
         */
        this.target = null;

        /**
         * @type {?UnsettledMap}
         */
        this.unsettled = null;

        /**
         * @type {?Bool}
         */
        this.incompleteUnsettled = null;

        /**
         * @type {?SequenceNumber}
         */
        this.delivered = null;

        /**
         * @type {?ULong}
         */
        this.maxMessageSize = null;

        /**
         * @type {?SymbolArray}
         */
        this.offered = null;

        /**
         * @type {?SymbolArray}
         */
        this.desired = null;

        /**
         * @type {?Fields}
         */
        this.properties = null;
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return LIST32;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        encoder.writeString(true, this.name);
        encoder.writeUInt(true, this.handle);
        encoder.writeBool(true, this.roleReceiver);
        encoder.writeUByte(false, this.sndSettleMode);
        encoder.writeUByte(false, this.rcvSettleMode);
        encoder.writeComposite(false, this.source);
        encoder.writeComposite(false, this.target);
        encoder.writeAnyMap(false, this.unsettled,
            (key) => encoder.writeBinaryString(true, key, 32),
            (val) => encoder.writeComposite(true, val)
        );
        encoder.writeBool(false, this.incompleteUnsettled);
        encoder.writeUInt(false, this.delivered);
        encoder.writeULong(false, this.maxMessageSize);
        encoder.writeSymbols(false, this.offered);
        encoder.writeSymbols(false, this.desired);
        encoder.writeFields(false, this.properties);
        return 14;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
        this.name = decoder.readString(true, scope);
        this.handle = decoder.readUInt(true, scope);
        this.roleReceiver = decoder.readBool(true, scope);
        this.sndSettleMode = decoder.readUByte(false, scope);
        this.rcvSettleMode = decoder.readUByte(false, scope);
        this.source = decoder.readComposite(false, scope, buildComposite, LinkSource);
        this.target = decoder.readComposite(false, scope, buildComposite, LinkTarget);
        this.unsettled = decoder.readAnyMap(false, scope,
            () => decoder.readBinaryString(true, null, 32),
            () => decoder.readComposite(true, null, buildComposite, DeliveryState)
        );
        this.incompleteUnsettled = decoder.readBool(false, scope);
        this.delivered = decoder.readUInt(false, scope);
        this.maxMessageSize = decoder.readULong(false, scope, true);
        this.offered = decoder.readSymbols(false, scope);
        this.desired = decoder.readSymbols(false, scope);
        this.properties = decoder.readFields(false, scope);
    }

}

/**
 * @private
 * @final
 */
class Flow extends AmqpFrame {

    /**
     *
     */
    constructor(){
        super(FLOW);

        /**
         * @type {?TransferNumber}
         */
        this.nextIncomingID = null;

        /**
         * @type {?UInt}
         */
        this.incomingWindow = null;

        /**
         * @type {?TransferNumber}
         */
        this.nextOutgoingID = null;

        /**
         * @type {?UInt}
         */
        this.outgoingWindow = null;

        /**
         * @type {?LinkHandle}
         */
        this.handle = null;

        /**
         * @type {?SequenceNumber}
         */
        this.delivered = null;

        /**
         * @type {?UInt}
         */
        this.credit = null;

        /**
         * @type {?UInt}
         */
        this.available = null;

        /**
         * @type {?Bool}
         */
        this.drain = null;

        /**
         * @type {?Bool}
         */
        this.echo = null;

        /**
         * @type {?Fields}
         */
        this.properties = null;
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return this.properties ? LIST32 : LIST8;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        encoder.writeUInt(false, this.nextIncomingID);
        encoder.writeUInt(true, this.incomingWindow);
        encoder.writeUInt(true, this.nextOutgoingID);
        encoder.writeUInt(true, this.outgoingWindow);
        encoder.writeUInt(false, this.handle);
        encoder.writeUInt(false, this.delivered);
        encoder.writeUInt(false, this.credit);
        encoder.writeUInt(false, this.available);
        encoder.writeBool(false, this.drain);
        encoder.writeBool(false, this.echo);
        encoder.writeFields(false, this.properties);
        return 11;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
        this.nextIncomingID = decoder.readUInt(false, scope);
        this.incomingWindow = decoder.readUInt(true, scope);
        this.nextOutgoingID = decoder.readUInt(true, scope);
        this.outgoingWindow = decoder.readUInt(true, scope);
        this.handle = decoder.readUInt(false, scope);
        this.delivered = decoder.readUInt(false, scope);
        this.credit = decoder.readUInt(false, scope);
        this.available = decoder.readUInt(false, scope);
        this.drain = decoder.readBool(false, scope);
        this.echo = decoder.readBool(false, scope);
        this.properties = decoder.readFields(false, scope);
    }

}

/**
 * @private
 * @final
 */
class Transfer extends AmqpFrame {

    /**
     * @param {?MessageFormat=} messageFormat
     */
    constructor(messageFormat = null){
        super(TRANSFER);

        /**
         * @type {?LinkHandle}
         */
        this.linkHandle = null;

        /**
         * @type {?DeliveryNumber}
         */
        this.deliveryID = null;

        /**
         * @type {?DeliveryTag}
         */
        this.deliveryTag = null;

        /**
         * @type {?MessageFormat}
         */
        this.messageFormat = messageFormat;

        /**
         * @type {?Bool}
         */
        this.settled = null;

        /**
         * @type {?Bool}
         */
        this.more = null;

        /**
         * @type {?RcvSettleMode}
         */
        this.rcvSettleMode = null;

        /**
         * @type {?DeliveryState}
         */
        this.state = null;

        /**
         * @type {?Bool}
         */
        this.resume = null;

        /**
         * @type {?Bool}
         */
        this.aborted = null;

        /**
         * @type {?Bool}
         */
        this.batchable = null;

        /**
         * @type {Message}
         */
        this.message = new Message();

        /** ------------------------ decoder support ------------------------ */

        /**
         * @type {number}
         */
        this.msgLimit = 0;

        /**
         * @type {number}
         */
        this.msgSize = 0;

        /**
         * @type {?Array<!Buffer>}
         */
        this.msgData = null;

        /** ------------------------ encoder support ------------------------ */

        /**
         * @type {?BoolWriter}
         * @private
         */
        this._writeMore = null;

        /** ------------------------ runtime support ------------------------ */

        /**
         * @type {?NotifyOfTransferStarted}
         */
        this.onStarted = null;

        /**
         * @type {?NotifyOfTransferSplit}
         */
        this.onSplit = null;

        /**
         * @type {?NotifyOfTransferDispose}
         */
        this.onDispose = null;

        /**
         * @type {?NotifyOfTransferFailure}
         */
        this.onFailure = null;
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return (this.deliveryTag || this.state) ? LIST32 : LIST8;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        encoder.writeUInt(true, this.linkHandle);
        encoder.writeUInt(false, this.deliveryID);
        encoder.writeBinaryString(false, this.deliveryTag, 32);
        encoder.writeUInt(false, this.messageFormat);
        encoder.writeBool(false, this.settled);
        const writeMore = encoder.writeBoolLate(false);
        encoder.writeUByte(false, this.rcvSettleMode);
        encoder.writeComposite(false, this.state);
        encoder.writeBool(false, this.resume);
        encoder.writeBool(false, this.aborted);
        encoder.writeBool(false, this.batchable);
        this._writeMore = writeMore;       // enable frame switch as of this writer state only
        return 11;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
        this.linkHandle = decoder.readUInt(true, scope);
        const previous = decoder.frameCache.pop(this.channel, this.linkHandle);

        if (previous === null) {
            this.msgLimit = decoder.getMaxMessageSize(this.channel, this.linkHandle);
            this.deliveryID = decoder.readUInt(true, scope);
            this.deliveryTag = decoder.readBinaryString(true, scope, 32);
            this.messageFormat = decoder.readUInt(true, scope);
            this.settled = decoder.readBool(false, scope);
            this.more = decoder.readBool(false, scope);
            this.rcvSettleMode = decoder.readUByte(false, scope);
            this.state = decoder.readComposite(false, scope, buildComposite, DeliveryState);
            this.resume = decoder.readBool(false, scope);
            this.aborted = decoder.readBool(false, scope);
            this.batchable = decoder.readBool(false, scope);
        } else {
            this.deliveryID = decoder.readUInt(false, scope, previous.deliveryID);
            this.deliveryTag = decoder.readBinaryString(false, scope, 32, previous.deliveryTag);
            this.messageFormat = decoder.readUInt(false, scope, previous.messageFormat);
            this.settled = decoder.readBool(false, scope, previous.settled);
            this.more = decoder.readBool(false, scope);
            this.rcvSettleMode = decoder.readUByte(false, scope, previous.rcvSettleMode);
            this.state = decoder.readComposite(false, scope, buildComposite, DeliveryState, previous.state);
            this.resume = decoder.readBool(false, scope, previous.resume);
            this.aborted = decoder.readBool(false, scope);
            this.batchable = decoder.readBool(false, scope, previous.batchable);

            if (this.deliveryID !== previous.deliveryID)
                throw ErrMsg(EC.DECODE_MULTI_TRANSFER_ERROR, 'delivery id');
            if (this.deliveryTag !== previous.deliveryTag)
                throw ErrMsg(EC.DECODE_MULTI_TRANSFER_ERROR, 'delivery tag');
            if (this.messageFormat !== previous.messageFormat)
                throw ErrMsg(EC.DECODE_MULTI_TRANSFER_ERROR, 'message format');

            this.msgData = previous.msgData;
            this.msgSize = previous.msgSize;
            this.msgLimit = previous.msgLimit;
        }
    }

    /**
     * @param {!Encoder} encoder
     */
    encodeData(encoder) {
        encoder.valueComposite(this);
        if (this.message) {
            encoder.scopePayload(true);
            this.message.encodeData(encoder);
            encoder.scopePayload(false);
        }
        this._writeMore(false);
        this._writeMore = null;
    }

    /**
     * @param {!Encoder} encoder
     */
    encodeMore(encoder) {
        if (this.onSplit)
            this.onSplit();
        if (this._writeMore)
            this._writeMore(true);
        else
            throw ErrMsg(EC.ENCODE_PERF_DATA_TOO_BIG, this.constructor.name, encoder.maxFrameSize);
        encoder.valueComposite(this);
    }

    /**
     * @param {!Encoder} encoder
     */
    encodeDone(encoder) {
        if (typeof this.onStarted === 'function') this.onStarted();
    }

    /**
     * @param {!Decoder} decoder
     * @return {boolean} - ready
     */
    decodeData(decoder) {
        decoder.readCompositeValue(this);  // will check frame cache after reading the handle, but before other data

        const size = decoder.bytesExpected - decoder.bytesConsumed;
        this.msgSize += size;

        if (this.msgLimit && this.msgSize > this.msgLimit) {
            throw ErrMsg(EC.DECODE_MAX_MESSAGE_SIZE, this.linkHandle, this.msgLimit, this.msgSize);
        }

        if (this.aborted) {
            this.msgData = decoder.readDataBlobArray(this.msgData, size);
            this.msgData = null;
        } else if (this.more) {
            this.msgData = decoder.readDataBlobArray(this.msgData, size);
            decoder.frameCache.push(this.channel, this.linkHandle, this);
        } else if (this.msgData) {
            this.msgData = decoder.readDataBlobArray(this.msgData, size);
            decoder.decode(this.msgData, this.message);
            this.msgData = null;
            this.msgSize = 0;
        } else {
            this.message.decodeData(decoder);
            this.msgSize = 0;
        }

        return this.aborted || !this.more;
    }

}

/**
 * @private
 * @final
 */
class Disposition extends AmqpFrame {

    /**
     *
     */
    constructor(){
        super(DISPOSITION);

        /**
         * @type {?RoleReceiver}
         */
        this.roleReceiver = null;

        /**
         * @type {?DeliveryNumber}
         */
        this.first = null;

        /**
         * @type {?DeliveryNumber}
         */
        this.last = null;

        /**
         * @type {?Bool}
         */
        this.settled = null;

        /**
         * @type {?DeliveryState}
         */
        this.state = null;

        /**
         * @type {?Bool}
         */
        this.batchable = null;
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return this.state ? LIST32 : LIST8;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        encoder.writeBool(true, this.roleReceiver);
        encoder.writeUInt(true, this.first);
        encoder.writeUInt(false, this.last);
        encoder.writeBool(false, this.settled);
        encoder.writeComposite(false, this.state);
        encoder.writeBool(false, this.batchable);
        return 6;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
        this.roleReceiver = decoder.readBool(true, scope);
        this.first = decoder.readUInt(true, scope);
        this.last = decoder.readUInt(false, scope);
        this.settled = decoder.readBool(false, scope);
        this.state = decoder.readComposite(false, scope, buildComposite, DeliveryState);
        this.batchable = decoder.readBool(false, scope);
    }

}

/**
 * @private
 * @final
 */
class Detach extends AmqpFrame {

    /**
     *
     */
    constructor(){
        super(DETACH);

        /**
         * @type {?LinkHandle}
         */
        this.handle = null;

        /**
         * @type {?Bool}
         */
        this.closed = null;

        /**
         * @type {?ErrorValue}
         */
        this.error = null;
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return this.error ? LIST32 : LIST8;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        encoder.writeUInt(true, this.handle);
        encoder.writeBool(false, this.closed);
        encoder.writeComposite(false, this.error);
        return 3;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
        this.handle = decoder.readUInt(true, scope);
        this.closed = decoder.readBool(false, scope);
        this.error = decoder.readComposite(false, scope, buildComposite, ErrorValue);
    }

}

/**
 * @private
 */
class End extends AmqpFrame {

    /**
     *
     */
    constructor(){
        super(END);

        /**
         * @type {?ErrorValue}
         */
        this.error = null;
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return this.error ? LIST32 : LIST0;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        encoder.writeComposite(false, this.error);
        return 1;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
        this.error = decoder.readComposite(false, scope, buildComposite, ErrorValue);
    }

}

/**
 * @private
 */
class Close extends AmqpFrame {

    /**
     * @param {?ErrorValue} error
     */
    constructor(error = null){
        super(CLOSE);

        /**
         * @type {?ErrorValue}
         */
        this.error = error;
    }

    /**
     * @returns {!FormatCode}
     * @override
     */
    defineComp() {
        return this.error ? LIST32 : LIST0;
    }

    /**
     * @param {!Encoder} encoder
     * @return {!FieldCount}
     * @override
     */
    encodeComp(encoder) {
        encoder.writeComposite(false, this.error);
        return 1;
    }

    /**
     * @param {!Decoder} decoder
     * @param {BlockCountCheck=} scope
     * @override
     */
    decodeComp(decoder, scope) {
        this.error = decoder.readComposite(false, scope, buildComposite, ErrorValue);
    }

}

/**
 * @param {Descriptor} desc
 * @return {*}
 * @private
 */
function buildFrame(desc) {
    switch (desc && typeof desc === 'object' ? desc.valueOf() : desc) {
        case OPEN:
            return new Open();
        case BEGIN:
            return new Begin();
        case ATTACH:
            return new Attach();
        case FLOW:
            return new Flow();
        case TRANSFER:
            return new Transfer();
        case DISPOSITION:
            return new Disposition();
        case DETACH:
            return new Detach();
        case END:
            return new End();
        case CLOSE:
            return new Close();
        case null:
            return new Empty();
        default:
            throw ErrMsg(EC.DECODE_DESC_MISMATCH, 8, desc, ErrOpt(OPEN, BEGIN, ATTACH, FLOW, TRANSFER, DISPOSITION, DETACH, END, CLOSE));
    }
}

module.exports = {
    PROTOCOL: PROTOCOL.ID.AMQP,
    TYPE : TYPE,
    build : buildFrame,
    Frame : AmqpFrame,
    Empty : Empty,
    Open : Open,
    Begin : Begin,
    Attach : Attach,
    Flow : Flow,
    Transfer : Transfer,
    Disposition : Disposition,
    Detach : Detach,
    End : End,
    Close : Close
};

