'use strict';

const fs = require('fs');
const assert = require('assert');
const path = require('path');
const debug = require('debug')('xsenv');

const DEFAULT_SECRETS_PATH = '/etc/secrets/sapcp/';

exports.readK8SServices = readK8SServices;

const isFile = filePath => fs.statSync(filePath).isFile();
const isDirectory = dirPath => fs.statSync(dirPath).isDirectory();

function isJsonObject(str) {
  // Also consider the case in which the file is written by hand:
  // allow new lines and trailing whitespaces.
  return /^{(.|\r?\n?)*}(\s)*$/.test(str);
}

function readFileContent(filePath) {
  let content = fs.readFileSync(filePath, 'utf8');

  if (!isJsonObject(content)) {
    return content;
  }

  try {
    content = JSON.parse(content);
  } catch (err) {
    debug('Content of file %s is not valid JSON object', filePath);
  }
  return content;
}

function readFiles(dirPath) {
  const result = {};
  for (let file of fs.readdirSync(dirPath)) {
    const filePath = path.join(dirPath, file);
    if (isFile(filePath)) {
      result[file] = readFileContent(filePath);
    }
  }
  return result;
}

function readInstance(serviceName, instanceName, instancePath) {
  return {
    credentials: readFiles(instancePath),
    name: instanceName,
    label: serviceName,
    tags: [serviceName]
  };
}

function readServiceInstances(serviceName, servicePath) {
  const result = {};
  for (let instanceName of fs.readdirSync(servicePath)) {
    const instancePath = path.join(servicePath, instanceName);
    if (isDirectory(instancePath)) {
      result[instanceName] = readInstance(serviceName, instanceName, instancePath);
    }
  }
  return result;
}

function readSecrets(secretsPath) {
  assert(isDirectory(secretsPath), 'secrets path must be a directory');

  const result = {};
  for (let serviceName of fs.readdirSync(secretsPath)) {
    const servicePath = path.join(secretsPath, serviceName);
    if (isDirectory(servicePath)) {
      Object.assign(result, readServiceInstances(serviceName, servicePath));
    }
  }
  return result;
}

function readK8SServices(secretsPath) {
  secretsPath = secretsPath || DEFAULT_SECRETS_PATH;
  assert(typeof secretsPath === 'string', 'secrets directory path must be string');

  return fs.existsSync(secretsPath) ? readSecrets(secretsPath) : undefined;
}
